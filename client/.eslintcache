[{"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/index.js":"1","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/App.js":"2","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Login.js":"3","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/History.js":"4","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/SavedResults.js":"5","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/OverallResults.js":"6","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/TopNavigator.js":"7","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Voting.js":"8","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Results.js":"9","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/LogoutComponent.js":"10","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/NavBar.js":"11","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/NavBarStyles.js":"12","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/LoginStyles.js":"13"},{"size":200,"mtime":1622387932553,"results":"14","hashOfConfig":"15"},{"size":2309,"mtime":1632769932855,"results":"16","hashOfConfig":"15"},{"size":2697,"mtime":1632769622154,"results":"17","hashOfConfig":"15"},{"size":949,"mtime":1622387932553,"results":"18","hashOfConfig":"15"},{"size":866,"mtime":1632769622154,"results":"19","hashOfConfig":"15"},{"size":3562,"mtime":1632769622154,"results":"20","hashOfConfig":"15"},{"size":712,"mtime":1622387932553,"results":"21","hashOfConfig":"15"},{"size":3917,"mtime":1632756172621,"results":"22","hashOfConfig":"15"},{"size":1749,"mtime":1622387932553,"results":"23","hashOfConfig":"15"},{"size":447,"mtime":1622387932553,"results":"24","hashOfConfig":"15"},{"size":1763,"mtime":1632769622154,"results":"25","hashOfConfig":"15"},{"size":851,"mtime":1632769622154,"results":"26","hashOfConfig":"15"},{"size":404,"mtime":1632769622154,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hb8zk2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/index.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/App.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Login.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/History.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/SavedResults.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/OverallResults.js",["56","57","58"],"import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport _ from 'lodash'\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './OverallResults.css'\n\nfunction OverallResults() {\n  const [rows, setRows] = useState([])\n  const user = localStorage.getItem('MERIT_MONEY_USERNAME') || ''\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650\n    },\n  });\n  const StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: '#5101d1',\n      color: theme.palette.common.white,\n\n    },\n    body: {\n      fontSize: 14,\n    },\n  }))(TableCell);\n\n  const StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: '#e7e7e7',\n      },\n    },\n  }))(TableRow);\n  useEffect(() => {\n    axios.get(`/overall`).then((res) => {\n      const allResults = res.data\n      let result = []\n      allResults.map(eachResult => {\n        eachResult.votes.map(vote => {\n          const temp = _.find(result, (res) => {\n            return res.username === vote.username\n          })\n          if (temp) {\n            temp.allVotes += vote.votes\n            temp.attempts++\n          } else {\n            result.push({username: vote.username, allVotes: parseInt(vote.votes), attempts: 1})\n          }\n        })\n      })\n      result.map(res => {\n        res.average = parseInt(res.allVotes / res.attempts)\n      })\n      setRows(_.sortBy(result, ['average']).reverse())\n    }).catch((err) => {\n      window.alert(err.response.data)\n    })\n  }, [])\n  const classes = useStyles()\n  const sort = (type) => {\n    setRows(_.sortBy(rows, [type]).reverse())\n  }\n  return (\n    <div className='overall__result__body'>\n      <span>Summary of All Voting </span>\n      <TableContainer component={Paper}>\n        <Table classname={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Username</StyledTableCell>\n              <StyledTableCell style={{cursor: 'pointer'}} align=\"center\"\n                               onClick={() => sort('allVotes')}>Votes</StyledTableCell>\n              <StyledTableCell style={{cursor: 'pointer'}} align=\"center\"\n                               onClick={() => sort('attempts')}>Attempts</StyledTableCell>\n              <StyledTableCell style={{cursor: 'pointer'}} align=\"center\"\n                               onClick={() => sort('average')}>Average</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <StyledTableRow style={{border: row.username === user ? '5px solid #5101d1': ''}} key={row.username}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {row.username}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">{row.allVotes}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.attempts}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.average}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n\n\n}\n\nexport default OverallResults\n","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/TopNavigator.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Voting.js",["59","60"],"import React, {useState, useEffect} from 'react'\nimport io from 'socket.io-client'\nimport {useParams, useHistory} from 'react-router-dom'\nimport './Voting.css'\n\nfunction Voting({username, room}) {\n  const [socket, setSocket] = useState()\n  const [users, setUsers] = useState([])\n  const [voters, setVoters] = useState([])\n  const [creator, setCreator] = useState('')\n  const [votingStarted, setVotingStarted] = useState(false)\n  const [numberOfVotes, setNumberOfVotes] = useState([])\n  const [insertedVotes, setInsertedVotes] = useState(0)\n  const history = useHistory()\n  const {roomId} = useParams()\n  useEffect(() => {\n    if (!username)\n      history.push(`/login/${roomId}`)\n  }, [username, roomId, history])\n\n  useEffect(() => {\n    if (!username) return\n    const s = io('/', {query: {username, room: roomId}})\n    setSocket(s)\n    return () => {\n      s.disconnect(room)\n    }\n  }, [room, username])\n\n  useEffect(() => {\n    if (!socket) return\n    socket.on('get-all-users', res => {\n      setUsers(res.usernames.filter(user =>\n        user !== username\n      ))\n      setNumberOfVotes(parseInt(res.numberOfVotes))\n      setCreator(res.creator)\n      setVotingStarted(res.started)\n    })\n    socket.on('new-user-joined', newUser => {\n      if (users.includes(newUser) || votingStarted)\n        return\n      setUsers(ps => {\n        return [...ps, newUser]\n      })\n    })\n    socket.on('has-voted', voter => {\n      if (voters.includes(voter))\n        return\n      setVoters(ps => {\n        return [...ps, voter]\n      })\n    })\n    socket.on('user-left', newUser => {\n      if (!users.includes(newUser) || votingStarted)\n        return\n      setUsers(ps => {\n        return ps.filter(p => {\n          return p !== newUser\n        })\n      })\n    })\n    socket.on('voting-started', () => {\n        setVotingStarted(true)\n      }\n    )\n    socket.on('receive-votes', () => {\n        history.push(`/result/${roomId}`)\n      }\n    )\n    return () => {\n      socket.off('new-user-joined')\n      socket.off('get-all-users')\n      socket.off('user-left')\n      socket.off('receive-votes')\n      socket.off('voting-started')\n    }\n  }, [socket, users, roomId, history, votingStarted])\n\n  function calculateVotes(e) {\n    if (e.target.value < 0) {\n      window.alert('votes should be positives')\n      e.target.value = 0\n      return\n    }\n    setInsertedVotes(calcVotes)\n  }\n\n  function calcVotes() {\n    let sum = 0\n    document.querySelectorAll('input').forEach(el => {\n      if (el.value < 0) {\n        window.alert('votes should be positives')\n        return\n      }\n      sum += parseInt(el.value || 0)\n    })\n    return sum\n  }\n\n  function sendVotes() {\n    const sumVotes = calcVotes()\n    if (sumVotes !== numberOfVotes) {\n      window.alert(`you have votes remaining: ${numberOfVotes - sumVotes}`)\n    } else {\n      const votes = {}\n      document.querySelectorAll('input').forEach(el => {\n        votes[el.id] = el.value\n      })\n      socket.emit('send-votes', votes, roomId, username)\n      window.alert('votes submitted')\n    }\n  }\n\n  function startVoting() {\n    socket.emit('start-voting', roomId)\n  }\n\n  return (\n    <div className='voting__body'>\n      <span> total votes : {numberOfVotes}</span>\n      <span> remaining votes : {numberOfVotes - insertedVotes}</span>\n\n      <ul className='voting__list'>\n        {users.map((user, index) => (\n          <div className='voting__list-items' key={user}>\n            <li className={voters.includes(user) ? 'voted' : ''}>\n              {index + 1} - {user}\n            </li>\n            <input onChange={calculateVotes} type='number' defaultValue={0} id={user}/>\n          </div>\n        ))}\n      </ul>\n      <button style={{marginTop: '10px'}} onClick={sendVotes} disabled={!votingStarted}> Send</button>\n      {creator === username && <button style={{marginTop: '10px'}} onClick={startVoting}> Start</button>}\n    </div>\n  )\n}\n\nexport default Voting\n","/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/Results.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/LogoutComponent.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/NavBar.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/components/NavBarStyles.js",[],"/home/adanic/Desktop/Hamed's_Projects/Merit_Money/client/src/pages/LoginStyles.js",[],{"ruleId":"61","severity":1,"message":"62","line":44,"column":33,"nodeType":"63","messageId":"64","endLine":44,"endColumn":35},{"ruleId":"61","severity":1,"message":"62","line":45,"column":35,"nodeType":"63","messageId":"64","endLine":45,"endColumn":37},{"ruleId":"61","severity":1,"message":"62","line":57,"column":22,"nodeType":"63","messageId":"64","endLine":57,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":28,"column":6,"nodeType":"67","endLine":28,"endColumn":22,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":78,"column":6,"nodeType":"67","endLine":78,"endColumn":53,"suggestions":"70"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'roomId'. Either include it or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has missing dependencies: 'username' and 'voters'. Either include them or remove the dependency array. If 'setUsers' needs the current value of 'username', you can also switch to useReducer instead of useState and read 'username' in the reducer.",["72"],{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [room, roomId, username]",{"range":"77","text":"78"},"Update the dependencies array to be: [socket, users, roomId, history, votingStarted, username, voters]",{"range":"79","text":"80"},[890,906],"[room, roomId, username]",[2138,2185],"[socket, users, roomId, history, votingStarted, username, voters]"]